jetpack que usamos es el 6.4

sudo apt-get update
sudo apt-get upgrade
ifconfig 	--para ver las direcciones ip

192.168.0.13  	--direccion ip para control remoto

*****************************************Adding WiFi to the NVIDIA Jetson***********************
sudo apt-get update
sudo apt-get upgrade
cd Documentos/
git clone https://github.com/lwfinger/rtl8723bu.git
cd rtl8723bu
source dkms.conf
sudo mkdir /usr/src/$PACKAGE_NAME-$PACKAGE_VERSION
sudo cp -r core hal include os_dep platform dkms.conf Makefile rtl8723b_fw.bin /usr/src/$PACKAGE_NAME-$PACKAGE_VERSION
sudo apt-get install dkms
sudo dkms add $PACKAGE_NAME/$PACKAGE_VERSION
sudo dkms autoinstall $PACKAGE_NAME/$PACKAGE_VERSION
sudo reboot now


***************************************INSTALACION XRDP******************************************
sudo apt update
sudo apt install xrdp
sudo systemctl enable xrdp
sudo reboot

***************************************INSTALACION VNC******************************************
sudo apt-get install nano

sudo nano /usr/share/glib-2.0/schemas/org.gnome.Vino.gschema.xml

<key name='enabled' type='b'>
   <summary>Enable remote access to the desktop</summary>
   <description>
   If true, allows remote access to the desktop via the RFB
   protocol. Users on remote machines may then connect to the
   desktop using a VNC viewer.
   </description>
   <default>false</default>
</key>


sudo glib-compile-schemas /usr/share/glib-2.0/schemas

gsettings set org.gnome.Vino require-encryption false
gsettings set org.gnome.Vino prompt-enabled false

**********************************************install OPENCV on Jetson ***************************

python --version
python3 --version
sudo apt-get install python3-pip 
pip3 install virtualenv 							--para crear entornos virtuales
python3 -m virtualenv -p python3 env --system-site-packages    			--creamos un entorno virtual
source env/bin/activate 							--activamos el entorno virtual
python -c 'import cv2; print(cv2.__version__)' 
free -h

Create SwapFile:
sudo fallocate -l 4G /var/swapfile 
ls -lh /var/swapfile
sudo chmod 600 /var/swapfile
sudo mkswap /var/swapfile
sudo swapon /var/swapfile

sudo chmod 600 /var/swapfile
sudo mkswap /var/swapfile
sudo swapon /var/swapfile
 
*	sudo bash -c 'echo "/var/swapfile swap swap defaults 0 0"  >> /etc/fstab’ 	--este no

sudo cp /etc/fstab /etc/fstab.bak
echo 'var/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

Removing the Swap Partition
https://www.forecr.io/blogs/programming/how-to-increase-swap-space-on-jetson-modules

sudo reboot

After rebooting check swap space  by using this command:   
free -h

Install these Dependencies before installing OpenCV:

sudo sh -c "echo '/usr/local/cuda/lib64' >> /etc/ld.so.conf.d/nvidia-tegra.conf"
sudo ldconfig
sudo apt-get install build-essential cmake git unzip pkg-config
sudo apt-get install libjpeg-dev libpng-dev libtiff-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev
sudo apt-get install libgtk2.0-dev libcanberra-gtk*
sudo apt-get install python3-dev python3-numpy python3-pip
sudo apt-get install libxvidcore-dev libx264-dev libgtk-3-dev
sudo apt-get install libtbb2 libtbb-dev libdc1394-22-dev
sudo apt-get install libv4l-dev v4l-utils
sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt-get install libavresample-dev libvorbis-dev libxine2-dev
sudo apt-get install libfaac-dev libmp3lame-dev libtheora-dev
sudo apt-get install libopencore-amrnb-dev libopencore-amrwb-dev
sudo apt-get install libopenblas-dev libatlas-base-dev libblas-dev
sudo apt-get install liblapack-dev libeigen3-dev gfortran
sudo apt-get install libhdf5-dev protobuf-compiler
sudo apt-get install libprotobuf-dev libgoogle-glog-dev libgflags-dev

Download OpenCV:
cd ~
wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.1.zip 
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.1.zip 
unzip opencv.zip 
unzip opencv_contrib.zip

Now rename the directories. Type each command below, one after the other.
mv opencv-4.5.1 opencv
mv opencv_contrib-4.5.1 opencv_contrib
rm opencv.zip
rm opencv_contrib.zip

Lets build OpenCV now:
cd ~/opencv
mkdir build
cd build 


copy and paste this entire block of commands below into your terminal.

cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 -D WITH_OPENCL=OFF -D WITH_CUDA=ON -D CUDA_ARCH_BIN=5.3 -D CUDA_ARCH_PTX="" -D WITH_CUDNN=ON -D WITH_CUBLAS=ON -D ENABLE_FAST_MATH=ON -D CUDA_FAST_MATH=ON -D OPENCV_DNN_CUDA=ON -D ENABLE_NEON=ON -D WITH_QT=OFF -D WITH_OPENMP=ON -D WITH_OPENGL=ON -D BUILD_TIFF=ON -D WITH_FFMPEG=ON -D WITH_GSTREAMER=ON -D WITH_TBB=ON -D BUILD_TBB=ON -D BUILD_TESTS=OFF -D WITH_EIGEN=ON -D WITH_V4L=ON -D WITH_LIBV4L=ON -D OPENCV_ENABLE_NONFREE=ON -D INSTALL_C_EXAMPLES=OFF -D INSTALL_PYTHON_EXAMPLES=OFF -D BUILD_NEW_PYTHON_SUPPORT=ON -D BUILD_opencv_python3=TRUE -D OPENCV_GENERATE_PKGCONFIG=ON -D BUILD_EXAMPLES=OFF ..

Build OpenCV. This command below will take a long time (around 2 hours), 
make -j4     # (make then space single dash and then j4)

Finish the install:
cd ~
sudo rm -r /usr/include/opencv4/opencv2
cd ~/opencv/build
sudo make install
sudo ldconfig
make clean
sudo apt-get update 

Verify OpenCV Installation
#open python3 shell
python3
import cv2
cv2.__version__


Install jtop, a system monitoring software for Jetson Nano.
cd ~
sudo -H pip3 install -U jetson-stats 
sudo reboot
jtop


Test Your Camera on Jetson Nano:
Turn on your Jetson Nano.
Open a new terminal window, and type:
ls /dev/video*   # show you a list of cameras
ls /dev/video0   #csi camera


Take a Photo:
nvgstcapture-1.0 --orientation=2       # for testing CSI camera
# V4L2 USB camera 
nvgstcapture-1.0 --camsrc=0 --cap-dev-node=1





**********************************************install OPENCV on Jetson with CSI CAMARA ***************************

sudo apt-get install gedit
sudo apt-get update
sudo apt-get -y upgrade

sudo apt-get install python3-pip 
pip3 install virtualenv 			--creamos un entorno virtual
python3 -m virtualenv -p python3 env		--system-site-packages    
source env/bin/activate 			--activamos el entorno virtual
python -c 'import cv2; print(cv2.__version__)' 



#################	PROBANDO PROGRAMAS EN PYTHON 		#####################################################
(env) jetson@jetson-desktop:~/python_examples$ python 1_testing_opencv.py
4.5.1
(env) jetson@jetson-desktop:~/python_examples$ python 2_video_read_show_opencv.py 

***** 			FOR CSI CAMARA 		***
pip3 install nanocamera

Soporte para múltiples cámaras CSI.
Para varias cámaras CSI, configure el device_idID de la cámara.

import nanocamera as nano
# Create the Camera instance for No rotation (flip=0) with size of 1280 by 800
# Connect to CSI camera with ID 0 (Default)
camera_1 = nano.Camera(device_id=0, flip=0, width=1280, height=800, fps=30)
# Connect to another CSI camera on the board with ID 1
camera_2 = nano.Camera(device_id=1, flip=0, width=1280, height=800, fps=30)


git clone https://github.com/thehapyone/NanoCamera
cd NanoCamera
sudo python3 setup.py install

Puede ver las cámaras USB conectadas ejecutando:
ls /dev/video*





Create SwapFile:
sudo fallocate -l 4G /var/swapfile 
sudo chmod 600 /var/swapfile
 sudo mkswap /var/swapfile
 
 sudo bash -c 'echo "/var/swapfile swap swap defaults 0 0"  >> /etc/fstab’ 

Reboot your PC: sudo reboot
After rebooting check swap space  by using this command:   free -h

Install these Dependencies before installing OpenCV:

sudo sh -c "echo '/usr/local/cuda/lib64' >> /etc/ld.so.conf.d/nvidia-tegra.conf“
sudo ldconfig
sudo apt-get install build-essential cmake git unzip pkg-config
sudo apt-get install libjpeg-dev libpng-dev libtiff-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev
sudo apt-get install libgtk2.0-dev libcanberra-gtk*
sudo apt-get install python3-dev python3-numpy python3-pip
sudo apt-get install libxvidcore-dev libx264-dev libgtk-3-dev
sudo apt-get install libtbb2 libtbb-dev libdc1394-22-dev
sudo apt-get install libv4l-dev v4l-utils
sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt-get install libavresample-dev libvorbis-dev libxine2-dev
sudo apt-get install libfaac-dev libmp3lame-dev libtheora-dev
sudo apt-get install libopencore-amrnb-dev libopencore-amrwb-dev
sudo apt-get install libopenblas-dev libatlas-base-dev libblas-dev
sudo apt-get install liblapack-dev libeigen3-dev gfortran
sudo apt-get install libhdf5-dev protobuf-compiler
sudo apt-get install libprotobuf-dev libgoogle-glog-dev libgflags-dev

Download OpenCV:
cd ~
wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.1.zip 
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.1.zip 
unzip opencv.zip 
unzip opencv_contrib.zip

Now rename the directories. Type each command below, one after the other.
mv opencv-4.5.1 opencv
mv opencv_contrib-4.5.1 opencv_contrib
rm opencv.zip
rm opencv_contrib.zip

Lets build OpenCV now:
cd ~/opencv
mkdir build
cd build 


copy and paste this entire block of commands below into your terminal.

cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 -D WITH_OPENCL=OFF -D WITH_CUDA=ON -D CUDA_ARCH_BIN=5.3 -D CUDA_ARCH_PTX="" -D WITH_CUDNN=ON -D WITH_CUBLAS=ON -D ENABLE_FAST_MATH=ON -D CUDA_FAST_MATH=ON -D OPENCV_DNN_CUDA=ON -D ENABLE_NEON=ON -D WITH_QT=OFF -D WITH_OPENMP=ON -D WITH_OPENGL=ON -D BUILD_TIFF=ON -D WITH_FFMPEG=ON -D WITH_GSTREAMER=ON -D WITH_TBB=ON -D BUILD_TBB=ON -D BUILD_TESTS=OFF -D WITH_EIGEN=ON -D WITH_V4L=ON -D WITH_LIBV4L=ON -D OPENCV_ENABLE_NONFREE=ON -D INSTALL_C_EXAMPLES=OFF -D INSTALL_PYTHON_EXAMPLES=OFF -D BUILD_NEW_PYTHON_SUPPORT=ON -D BUILD_opencv_python3=TRUE -D OPENCV_GENERATE_PKGCONFIG=ON -D BUILD_EXAMPLES=OFF ..

Build OpenCV. This command below will take a long time (around 2 hours), make -j4     # (make then space single dash and then j4)

Finish the install:
cd ~
sudo rm -r /usr/include/opencv4/opencv2
cd ~/opencv/build
sudo make install
sudo ldconfig
make clean
sudo apt-get update 

Verify OpenCV Installation
#open python3 shell
python3
import cv2
cv2._version_


Install jtop, a system monitoring software for Jetson Nano.
cd ~
sudo -H pip3 install -U jetson-stats 
sudo reboot
jtop


Test Your Camera on Jetson Nano:
Turn on your Jetson Nano.
Open a new terminal window, and type:
ls /dev/video0   #csi camera
ls /dev/video*   # show you a list of cameras

Take a Photo:
nvgstcapture-1.0 --orientation=2       # for testing CSI camera
# V4L2 USB camera 
nvgstcapture-1.0 --camsrc=0 --cap-dev-node=1


################################################################# YOLOv5 on Jetson Nano ##############################################################333
source env/bin/activate 

JetPack 4.6 (L4T R32.6.1)

PyTorch v1.8.0

Installation

wget https://nvidia.box.com/shared/static/p57jwntv436lfrd78inwl7iml6p13fzh.whl -O torch-1.8.0-cp36-cp36m-linux_aarch64.whl
sudo apt-get install python3-pip libopenblas-base libopenmpi-dev libomp-dev
pip3 install Cython
pip3 install numpy torch-1.8.0-cp36-cp36m-linux_aarch64.whl


-- PyTorch v1.4.0 for L4T R32.4.2 is the last version to support Python 2.7
-- PyTorch v1.8 - torchvision v0.9.0

torchvision v0.9.0

sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libopenblas-dev libavcodec-dev libavformat-dev libswscale-dev
git clone --branch v0.9.0 https://github.com/pytorch/vision torchvision   	# see below for version of torchvision to download
cd torchvision
export BUILD_VERSION=0.9.0  							# where 0.9.0 is the torchvision version  
python3 setup.py install --user
cd ../  									# attempting to load torchvision from build dir will result in import error
pip install 'pillow<7' 								# always needed for Python 2.7, not needed torchvision v0.5.0+ with Python 3.6

python3

import torch
print(torch.__version__)

import torchvision
print(torchvision.__version__)


######################################################################## YOLOv5 #################################################################################################
git clone https://github.com/ultralytics/yolov5

cd yolov5
vi requirements.txt
# torch>=1.8.0
# torchvision>=0.9.0

pip3 install -r requirements.txt

wget https://github.com/ultralytics/yolov5/releases/download/v6.1/yolov5s.pt


python -c 'import torch; print(torch.__version__)' 
python -c 'import torchvision; print(torchvision.__version__)' 
python -c 'import cv2; print(cv2.__version__)' 



ejecucion de YOLOv5

--ubicacion de la imagen
cd ~/Imágenes/img1.jpg

python detect.py --source ~/Imágenes/img1.jpg --weights yolov5s.pt
python detect.py --source ../img1.jpg --weights yolov5s.pt


pip install 'ultralytics'



pip install -r requirements.txt



29 de Enero instalacion Jetson Rocket Nano
sudo apt-get install -y liblapack-dev libblas-dev gfortran libfreetype6-dev libopenblas-base libopenmpi-dev libjpeg-dev zlib1g-dev
pip install imutils
$ export PATH=/usr/local/cuda-10.2/bin${PATH:+:${PATH}}
$ export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH
$ python3 -m pip install pycuda --user
sudo apt install python3-seaborn

###################################################################################################################################################################3
							detecion rocket
###################################################################################################################################################################3

##################################################### INTALACIONES DE SETUP.TXT ########################################################################################
# Install libraries
sudo apt-get update
sudo apt-get install -y liblapack-dev libblas-dev gfortran libfreetype6-dev libopenblas-base libopenmpi-dev libjpeg-dev zlib1g-dev
sudo apt-get install -y python3-pip

# Update Pip
python3 -m pip install --upgrade pip

# Install below necessary packages
# For numpy, first uninstall the version already installed, and then install numpy==1.19.0
numpy==1.19.0
pandas==0.22.0
Pillow==8.4.0
PyYAML==3.12
scipy==1.5.4
psutil
tqdm==4.64.1
imutils

# Install Pycuda
export PATH=/usr/local/cuda-10.2/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH
python3 -m pip install pycuda --user

# Install Seaborn
sudo apt install python3-seaborn

# Install torch & torchvision
wget https://nvidia.box.com/shared/static/fjtbno0vpo676a25cgvuqc1wty0fkkg6.whl -O torch-1.10.0-cp36-cp36m-linux_aarch64.whl
pip3 install torch-1.10.0-cp36-cp36m-linux_aarch64.whl
git clone --branch v0.11.1 https://github.com/pytorch/vision torchvision
cd torchvision
sudo python3 setup.py install 

# Not required but good library
jetson-stats==3.1.4

##################################################### INTALACIONES DE BUILDSETUP.TXT - SEGUIR DESDE AQUI PARA NUESTRO EJEMPLO ##################################
# Generate WTS file 
python3 gen_wts.py -w yolov7-tiny.pt -o yolov7-tiny.wts

# Cmake & Make 
# If using custom model, make sure to update kNumClas in yolov7/include/config.h
cd yolov7/
mkdir build
cd build
cp ../../yolov7-tiny.wts .
cmake ..
make 

# Build engine
sudo ./yolov7 -s yolov7-tiny.wts  yolov7-tiny.engine t

# Test
cd yolov7/build/
sudo ./yolov7 -d yolov7-tiny.engine ../images

/home/jetson/Documentos/JetsonYoloV7-TensorRT/yolov7/build 		--se guardan los resultados

##################################################### CONSIDERACIONES ANTES DE EJECUTAR############################################################################

/home/jetson/Documentos/JetsonYoloV7-TensorRT/yolov7/include/config.h			--ARCHIVO DONDE SE ESPECIFICA EL NUMERO DE CLASES
const static int kNumClass = 80;

##################################################### EJECUCION DE APP.PY en videos ########################################################################################



source env/bin/activate 
cd /home/jetson/Documentos/JetsonYoloV7-TensorRT
python app.py





################################################################ MODELO PERSONALIZADO #######################################################################################
# Generate WTS file 
python3 gen_wts.py -w yolov7-custom-tiny.pt -o yolov7-custom-tiny.wts
python3 gen_wts.py -w yolov7-custom-tiny.pt -o yolov7-custom-tiny.wts

python3 gen_wts.py -w bestYOLOv7Prueba2.pt -o bestYOLOv7Prueba2.wts

cd yolov7/
mkdir build
cd build
cp ../../bestYOLOv7Prueba2.wts
cmake ..
make

sudo ./yolov7 -s bestYOLOv7Prueba2.wts bestYOLOv7Prueba2.engine v7
sudo ./yolov7 -d bestYOLOv7Prueba2.engine ../images




Instalar MEdia Pipe




pip install mediapipe-0.8.9_cuda102-cp36-linux_aarch64.whl





























